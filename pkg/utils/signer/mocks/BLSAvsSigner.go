// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	bn254 "github.com/consensys/gnark-crypto/ecc/bn254"
	mock "github.com/stretchr/testify/mock"
)

// BLSAvsSigner is an autogenerated mock type for the BLSAvsSigner type
type BLSAvsSigner struct {
	mock.Mock
}

// Sign provides a mock function with given fields: g1MsgToSign
func (_m *BLSAvsSigner) Sign(g1MsgToSign *bn254.G1Affine) (*bn254.G1Affine, error) {
	ret := _m.Called(g1MsgToSign)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *bn254.G1Affine
	var r1 error
	if rf, ok := ret.Get(0).(func(*bn254.G1Affine) (*bn254.G1Affine, error)); ok {
		return rf(g1MsgToSign)
	}
	if rf, ok := ret.Get(0).(func(*bn254.G1Affine) *bn254.G1Affine); ok {
		r0 = rf(g1MsgToSign)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bn254.G1Affine)
		}
	}

	if rf, ok := ret.Get(1).(func(*bn254.G1Affine) error); ok {
		r1 = rf(g1MsgToSign)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: msg, signature
func (_m *BLSAvsSigner) Verify(msg *bn254.G1Affine, signature *bn254.G1Affine) (bool, error) {
	ret := _m.Called(msg, signature)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bn254.G1Affine, *bn254.G1Affine) (bool, error)); ok {
		return rf(msg, signature)
	}
	if rf, ok := ret.Get(0).(func(*bn254.G1Affine, *bn254.G1Affine) bool); ok {
		r0 = rf(msg, signature)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bn254.G1Affine, *bn254.G1Affine) error); ok {
		r1 = rf(msg, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBLSAvsSigner creates a new instance of BLSAvsSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBLSAvsSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *BLSAvsSigner {
	mock := &BLSAvsSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
